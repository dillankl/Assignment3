import numpy as np
from scipy.stats import norm
import unittest


class SignalDetection:
    def __init__(self, hits, misses, falseAlarms, correctRejections):
        self.hits = hits
        self.misses = misses
        self.falseAlarms = falseAlarms
        self.correctRejections = correctRejections
    #Creating hitRate and falseAlarmrate into functions to prevent corruption
    def hitRate(self):
        return(self.hits/(self.hits + self.misses))
    
    def falseAlarmrate(self):
        return(self.falseAlarms/(self.falseAlarms+ self.correctRejections))
        
    def d_prime(self):
        return (norm.ppf(self.hitRate()) - norm.ppf(self.falseAlarmrate()))

    def criterion(self):
        return -0.5 * (norm.ppf(self.hitRate()) + norm.ppf(self.falseAlarmrate()))
   #Add Overloading Operators 
    def __add__(self,other):
        return SignalDetection(self.hits + other.hits, self.misses + other.misses, 
        self.falseAlarms + other.falseAlarms, self.correctRejections + other.correctRejections)
    
    def __mul__(self,scalar):
        return SignalDetection( self.hits * scalar, self.misses * scalar, self.falseAlarms * scalar,
        self.correctRejections * scalar)
    
        
    
    
class TestSignalDetection(unittest.TestCase):
    def test_d_prime_zero(self):
        sd   = SignalDetection(15, 5, 15, 5)
        expected = 0
        obtained = sd.d_prime()
        self.assertAlmostEqual(obtained, expected, places=6)
    def test_d_prime_nonzero(self):
        sd   = SignalDetection(15, 10, 15, 5)
        expected = -0.421142647060282
        obtained = sd.d_prime()
        self.assertAlmostEqual(obtained, expected, places=6)
    def test_criterion_zero(self):
        sd   = SignalDetection(5, 5, 5, 5)
        expected = 0
        obtained = sd.criterion()
        self.assertAlmostEqual(obtained, expected, places=6)
    def test_criterion_nonzero(self):
        sd   = SignalDetection(15, 10, 15, 5)
        expected = -0.463918426665941
        obtained = sd.criterion()
        self.assertAlmostEqual(obtained, expected, places=6)
    #Writing a unit test to test corruption
    def test_corruption(self):
        sd   = SignalDetection(15, 5, 15, 5)
        sd.hits = 1000
        sd.misses= 200
        sd.falseAlarms = 1976
        sd.correctRejections = 2000
        expected = sd.d_prime()
        obtained = sd.d_prime()
        self.assertAlmostEqual(obtained, expected, places=6)
        

 

if __name__ == '__main__':
    unittest.main(argv=['first-arg-is-ignored'], exit=False)
